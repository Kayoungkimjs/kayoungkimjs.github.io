{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/프로젝트-시작과-후-함께-고민해야-할-것들","result":{"data":{"markdownRemark":{"id":"01765161-1271-56e2-a2a4-cbf268103f45","html":"<blockquote>\n<p>그룹웨어 리뉴얼을 위한 프로젝트를 진행하면서 1차 개발에서 아쉬웠던 점을 보완하고자 했다. 개발 기한이 짧다는 이유로 일단 우다다 개발하는 방법이 결국엔 수정과 보완에 시간을 더 쓴다는 것을 경험하고, 2차에서는 시간이 걸리더라도 개발 스펙을 협의하고 수정 방향(리팩토링)도 방향성에 대한 논의가 필요하다고 생각했다.</p>\n</blockquote>\n<h2 id=\"주요-라이브러리\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9A%94-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"주요 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주요 라이브러리</h2>\n<blockquote>\n<p>프로젝트의 특성, 러닝 커브, 유지보수 등을 고려해 사용할 라이브러리를 선택한다. 라이브러리의 특징을 정확하게 알고 다른 것과 비교하여 선택한 이유가 분명해야 한다.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>라이브러리</th>\n<th>설명</th>\n<th>선택 이유</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://react.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>React</strong></a></td>\n<td>사용자 인터페이스를 만들기 위한 JavaScript 라이브러리</td>\n<td>재사용 가능한 UI 구성 요소를 만들 수 있고, 동적인 웹 페이지를 보다 효율적으로 유지 보수할 수 있다.</td>\n</tr>\n<tr>\n<td><a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>TypeScript</strong></a></td>\n<td>자바스크립트에 타입을 부여한 언어</td>\n<td>정적 타입을 지원하므로 컴파일 단계에서 오류를 포착할 수 있는 장점이 있다. 또한 명시적 타입 지정으로 코드 가독성을 높이고 예측할 수 있게하며 디버깅하기에 용이하다.</td>\n</tr>\n<tr>\n<td><a href=\"https://recoiljs.org/ko/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Recoil</strong></a></td>\n<td>상태관리 라이브러리</td>\n<td>React 전용 상태관리 라이브러리로 손쉬운 전역상태 관리가 가능하며, Redux보다 단순한 상태구조와 작동 방식으로 러닝 커브가 낮다.</td>\n</tr>\n<tr>\n<td><a href=\"https://tanstack.com/query/latest/docs/react/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>React Query</strong></a><strong>(TanStack Query )</strong></td>\n<td>서버 상태관리 라이브러리</td>\n<td>API 상태와 관련된 다양한 데이터를 제공하여 복잡한 구현과 설계없이도 계발자가 효율적으로 화면을 구성할 수 있게 한다.</td>\n</tr>\n<tr>\n<td><a href=\"https://emotion.sh/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Emotion</strong></a></td>\n<td>css 라이브러리</td>\n<td>러닝커브가 다소 적고, 필요한 코드 주입의 자동화가 잘 되어있다. css props 기능을 이용하여 컴포넌트로 스타일링을 하기에도 용이하다.</td>\n</tr>\n<tr>\n<td><a href=\"https://ant.design/components/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Ant Design</strong></a><strong>/</strong><a href=\"https://mui.com/material-ui/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>MUI</strong></a></td>\n<td>UI 프레임워크</td>\n<td>어드민 페이지 개발에 필요한 컴포넌트가 세분화되어있고 완성도가 높다. AntD보다 디자인이 다양하고, 디테일한 기능을 제공한다. 커스텀에 용이하다.<br />*AntD: 관리자 페이지의 table, form 등에 일부 사용“*MUI: 이모티콘 사용</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"리팩토링-항목\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81-%ED%95%AD%EB%AA%A9\" aria-label=\"리팩토링 항목 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리팩토링 항목</h2>\n<blockquote>\n<p>프로젝트 개발 후에는 리팩토링이 필요하다. 프로젝트의 일관성과 향후 유지보수를 위해 항목별 체크리스트를 만들어 각자 맡은 부분에 대한 수정을 진행한다.</p>\n</blockquote>\n<ul>\n<li>\n<p>폴더 구조</p>\n<ul>\n<li>\n<p>공통 컴포넌트(함수)는 2군데 이상 사용하는 컴포넌트(함수) 일 경우를 나타냄</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">-</span> assets\n    <span class=\"token operator\">-</span> styles <span class=\"token comment\">// 공통 스타일 선언</span>\n    <span class=\"token operator\">-</span> images\n<span class=\"token operator\">-</span> components\n    <span class=\"token operator\">-</span> common <span class=\"token comment\">// 공통 컴포넌트</span>\n    <span class=\"token operator\">-</span> Layout <span class=\"token comment\">// 공통 레이아웃</span>\n\t<span class=\"token operator\">-</span> <span class=\"token operator\">...</span>\n<span class=\"token operator\">-</span> domain\n    <span class=\"token operator\">-</span> Deli\n      <span class=\"token operator\">-</span> comonents <span class=\"token comment\">// 도메인 관련 컴포넌트</span>\n      <span class=\"token operator\">-</span> hooks <span class=\"token comment\">// react-query hook</span>\n      <span class=\"token operator\">-</span> Deli<span class=\"token punctuation\">.</span>tsx\n\t<span class=\"token operator\">-</span> <span class=\"token operator\">...</span>\n    <span class=\"token operator\">-</span> index<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">-</span> store <span class=\"token comment\">// recoil</span>\n    <span class=\"token operator\">-</span> ui <span class=\"token function\">관련</span><span class=\"token punctuation\">(</span>클라이언트<span class=\"token punctuation\">)</span> 상태만 관리\n<span class=\"token operator\">-</span> hooks <span class=\"token comment\">// react-query 공통 함수</span>\n<span class=\"token operator\">-</span> utils <span class=\"token comment\">// 공통 함수</span>\n<span class=\"token operator\">-</span> constants <span class=\"token comment\">// 상수</span>\n<span class=\"token operator\">-</span> pages <span class=\"token comment\">// router 연결</span>\n<span class=\"token operator\">-</span> types <span class=\"token comment\">// 타입 선언</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>도메인 전용 컴포넌트는 도메인 안에 컴포넌트 폴더에 추가한다.(응집도를 높이기 위해)</p>\n</li>\n<li>\n<p>Naming Conventions</p>\n<ul>\n<li>\n<p>컴포넌트의 이름은 Pascal Case를 사용하여 작성한다.</p>\n</li>\n<li>\n<p>컴포넌트가 아닌 것들은 Camel Case를 사용하여 작성한다.</p>\n</li>\n<li>\n<p>style 파일 이름은 컴포넌트 이름과 동일해야 한다.</p>\n</li>\n<li>\n<p>string props에는 Curly Braces를 사용하지 않는다.</p>\n</li>\n<li>\n<p>JSX에서 Javascript Code를 제거한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bad</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Good</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickHandler<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>컴포넌트에 Chidren이 없는 경우 자체 닫기 태그를 사용한다. 가독성을 높여준다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Bug Avoidance</p>\n<ul>\n<li>\n<p>undefined나 null 체크는 Optional Chaining을 사용한다.</p>\n</li>\n<li>\n<p>비동기 호출 등의 이유로 아직 값이 넘어오지 않았을 때 구조분해할당 하는 경우 에러가 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bad</span>\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: Cannot destructure property 'item' of 'content' as it is undefined.</span>\n\n<span class=\"token comment\">// Good</span>\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> content <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>content <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefine</span></code></pre></div>\n</li>\n<li>\n<p>불필요한 console.log()를 제거한다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>함수 사용</p>\n<ul>\n<li>화살표 함수, 함수 표현식 사용 이 부분은 협의가 필요할듯</li>\n<li>서버호출함수나 리액트 쿼리 네이밍 통일하기</li>\n<li>순수함수</li>\n</ul>\n</li>\n<li>\n<p>상태관리</p>\n<ul>\n<li>불필요한 State Lifting과 Props Drilling을 피한다. 부모 컴포넌트에서 비동기 로직을 굳이 처리해줄 필요없다.</li>\n</ul>\n</li>\n<li>\n<p>import/export</p>\n<ul>\n<li>import 순서 지정</li>\n<li>export할 각 폴더에 대해 index.ts 사용(가져올 때 이름이 반복되지 않음)</li>\n</ul>\n</li>\n<li>\n<p>공통 컴포넌트 만들기</p>\n<ul>\n<li>modal 상태 및 callback함수를 props driling을 사용하지 않도록 개발</li>\n<li>antd에서 에러 유발하는 컴포넌트가 어떤 것들이 있을까요?</li>\n</ul>\n</li>\n<li>\n<p>Typescript</p>\n<ul>\n<li>any타입으로 되어있는 것 타입 지정하기</li>\n</ul>\n</li>\n<li>\n<p>로직</p>\n<ul>\n<li>등록이나 수정, 삭제는 서버에 사이드 이펙트를 발생시키는 기능은 Alert팝업을 띄워서 확인 작업을 한다.</li>\n<li>폼 등록이나 수정의 경우 유효성 검사를 추가한다.</li>\n</ul>\n</li>\n<li>\n<p>datePicker</p>\n<ul>\n<li>ant-design 의 datePicker은 moment를 사용하고 있으므로, dayJs를 사용하여 커스텀 한 컴포넌트를 적용한다.\n<ul>\n<li>moment - 지원 종료 및 패키지 용량이 큼</li>\n<li>dayjs - 패키지 용량 작음 계속 지원 중</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/2023-14-03---프로젝트-시작과-후-함께-고민해야-할-것들//posts/프로젝트-시작과-후-함께-고민해야-할-것들","tagSlugs":["/tag//","/tag/-/"]},"frontmatter":{"date":"2022-10-08T22:40:32.169Z","description":"최고의 프로젝트를 위한 프론트엔드 라이브러리 선택과 리팩토링에 대하여...","tags":["리팩토링","코드 컨벤션"],"title":"프로젝트 시작과 후 함께 고민해야 할 것들","socialImage":null}}},"pageContext":{"slug":"/posts/2023-14-03---프로젝트-시작과-후-함께-고민해야-할-것들//posts/프로젝트-시작과-후-함께-고민해야-할-것들"}},"staticQueryHashes":["250566491","251939775","401334301"]}