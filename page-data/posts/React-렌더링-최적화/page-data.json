{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/React-렌더링-최적화","result":{"data":{"markdownRemark":{"id":"a766e303-579d-5c5e-845f-9f174eea72b4","html":"<h2 id=\"react-렌더링이란\" style=\"position:relative;\"><a href=\"#react-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%B4%EB%9E%80\" aria-label=\"react 렌더링이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>React 렌더링이란?</strong></h2>\n<p>리액트에서 렌더링이란, 컴포넌트가 현재 props와 state의 상태에 기초하여 UI를 어떻게 구성할지 컴포넌트에게 요청하는 작업을 의미한다. 즉 사용자 화면에 View(내용)를 보여 주는 것.</p>\n<h3 id=\"초기-렌더링\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"초기 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기 렌더링</h3>\n<p>렌더링을 담당하는 <strong>render 함수</strong>는 컴포넌트의 정보를 이용해 화면을 구성(렌더링)한다.</p>\n<p>컴포넌트 내부에는 또 다른 컴포넌트들이 들어갈 수 있어, render 함수가 실행되면 그 내부에 있는 컴포넌트들도 재귀적으로 렌더링 된다.</p>\n<p>렌더링이 끝나면 render 함수가 반환한 객체의 정보를 이용하여 문자열 형식의 html코드를 반환해 특정 DOM에 주입한다.</p>\n<ul>\n<li>과정 설명\n<ol>\n<li>컴포넌트 정의</li>\n<li>컴포넌트의 정보를 이용해 렌더링</li>\n<li>문자열 형식 html 코드 반환</li>\n<li>DOM 요소에 주입</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"리렌더링-조화-과정\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%A1%B0%ED%99%94-%EA%B3%BC%EC%A0%95\" aria-label=\"리렌더링 조화 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리렌더링 (조화 과정)</h3>\n<p>리액트에서 뷰를 업테이트(리렌더링)할 때 “ <strong>조화과정을 거친다</strong> ” 라고 표현한다.</p>\n<p>뷰를 변형시키는 것으로 보이는게 사실 <strong>render 함수로 새로운 요소로 갈아 끼워지는 것이기 때문</strong>이다.</p>\n<p>이전에 생성한 컴포넌트 정보와 다시 렌더링한 정보를 비교해 최소한의 연산으로 DOM 트리를 업데이트한다.(Virtual DOM 개념)</p>\n<ul>\n<li>과정 설명\n<ol>\n<li>데이터 업데이트</li>\n<li>업데이트 된 데이터를 이용한 render 함수의 리렌더링</li>\n<li>이전 컴포넌트와 리렌더링된 컴포넌트 차이 비교 (Virtual DOM)</li>\n<li>바뀐 요소만 DOM에 반영</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"react-리렌더링-조건\" style=\"position:relative;\"><a href=\"#react-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%A1%B0%EA%B1%B4\" aria-label=\"react 리렌더링 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>React 리렌더링 조건</strong></h3>\n<ul>\n<li>자신의 <code class=\"language-text\">state</code> 변경</li>\n<li>부모에서 전달받은 <code class=\"language-text\">props</code> 변경</li>\n<li>부모 컴포넌트의 리렌더링</li>\n<li>forceUpdate 함수가 실행될 때 (← 클래스형 컴포넌트에서 강제 리렌더링하는 방법)</li>\n</ul>\n<h1 id=\"react-렌더링-성능-최적화-방법\" style=\"position:relative;\"><a href=\"#react-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-label=\"react 렌더링 성능 최적화 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>React 렌더링 성능 최적화 방법</strong></h1>\n<h2 id=\"1-usememo--usecallback\" style=\"position:relative;\"><a href=\"#1-usememo--usecallback\" aria-label=\"1 usememo  usecallback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. useMemo &#x26; useCallback</h2>\n<p><strong>useMemo와 useCallback은</strong> React Hook 중 하나. <strong>메모이제이션으로</strong> 중복 연산 ****을 피할 수 있기 때문에 메모리를 조금 더 쓰더라도 애플리케이션의 성능을 최적화할 수 있다.</p>\n<blockquote>\n<p>memoization: 기존에 수행한 연산의 결과값을 어딘가에 저장해두고 동일한 입력이 들어오면 재활용하는 프로그래밍 기법</p>\n</blockquote>\n<ul>\n<li><strong>useMemo :</strong> 메모이제이션된 ’ <strong>값</strong> ‘을 반환한다.</li>\n<li><strong>useCallback:</strong> 메모이제이션된 ’ <strong>함수</strong> ‘를 반환한다.</li>\n</ul>\n<h2 id=\"2-reactmemo\" style=\"position:relative;\"><a href=\"#2-reactmemo\" aria-label=\"2 reactmemo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. React.memo()</h2>\n<p>컴퍼넌트를 렌더링하고 결과를 메모이제이션. 그리고 다음 렌더링이 일어날 때 props가 같다면, 메모이징된 내용을 재사용한다. props 혹은 props의 객체를 비교할 때 얕은 비교를 한다.</p>\n<h2 id=\"3-자식-컴포넌트의-props로-객체를-넘겨줄-경우-변형하지말고-넘겨주기\" style=\"position:relative;\"><a href=\"#3-%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-props%EB%A1%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%84%98%EA%B2%A8%EC%A4%84-%EA%B2%BD%EC%9A%B0-%EB%B3%80%ED%98%95%ED%95%98%EC%A7%80%EB%A7%90%EA%B3%A0-%EB%84%98%EA%B2%A8%EC%A3%BC%EA%B8%B0\" aria-label=\"3 자식 컴포넌트의 props로 객체를 넘겨줄 경우 변형하지말고 넘겨주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 자식 컴포넌트의 props로 객체를 넘겨줄 경우 변형하지말고 넘겨주기</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 생성자 함수</span>\n<span class=\"token operator\">&lt;</span>Component prop<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Obj</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// 객체 리터럴</span>\n<span class=\"token operator\">&lt;</span>Component prop<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">property</span><span class=\"token operator\">:</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<hr>\n<p>위와같이 props로 객체를 넘겨줄 경우 컴포넌트가 리렌더링 될 때마다 새로운 객체가 생성되어 자식 컴포넌트로 전달된다.</p>\n<p>props로 전달한 객체가 동일한 값이어도 새로 생성된 객체는 이전 객체와 다른 참조 주소를 가진 객체이기 때문에 자식 컴포넌트는 메모이제이션이 되지않는다.</p>\n<p>state를 그대로 하위컴포넌트에 넘겨주어 필요한 데이터 가공을 그 하위컴포넌트에서 해주는 것이 좋다.</p>\n<h2 id=\"4-컴포넌트를-매핑할-때-key값으로-index-사용하지-않기\" style=\"position:relative;\"><a href=\"#4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%A7%A4%ED%95%91%ED%95%A0-%EB%95%8C-key%EA%B0%92%EC%9C%BC%EB%A1%9C-index-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0\" aria-label=\"4 컴포넌트를 매핑할 때 key값으로 index 사용하지 않기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 컴포넌트를 매핑할 때 key값으로 index 사용하지 않기</h2>\n<p>map함수를 돌릴 때 고유 key값을 부여해야하는데 이때 index로 key값을 설정한다면 중간에 새로운 값이 삽입된 경우 이후에 위치한 요소들은 전부 index가 변경된다.</p>\n<p>이로 인해 key값이 변경되어 React는 key가 동일 할 경우, 동일한 DOM Element를 보여주기 때문에 예상치 못한 문제가 발생합니다. 또한, 데이터가 key와 매치가 안되어 서로 꼬이는 부작용도 발생한다.</p>\n<p>다음과 같은 경우는 사용해도 괜찮다.</p>\n<ul>\n<li>배열과 각 요소가 수정, 삭제, 추가 등의 기능이 없는 단순 렌더링만 담당하는 경우</li>\n<li>id로 쓸만한 unique 값이 없을 경우</li>\n<li>정렬 혹은 필터 요소가 없을 때</li>\n</ul>\n<h2 id=\"5-usestate의-함수형-업데이트\" style=\"position:relative;\"><a href=\"#5-usestate%EC%9D%98-%ED%95%A8%EC%88%98%ED%98%95-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"5 usestate의 함수형 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. useState의 함수형 업데이트</h2>\n<p>기존의 useState를 사용하며, 대부분 setState시에 새로운 상태를 파라미터로 넣어주었다.</p>\n<p>setState를 사용할 때 새로운 상태를 파라미터로 넣는 대신, 상태 업데이트를 어떻게 할지 정의해 주는 업데이트 함수를 넣을 수도 있는데,</p>\n<p>이렇게 하면 <strong>useCallback을 사용할 때 두 번째 파라미터로 넣는 배열에 값을 넣어주지 않아도 된다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 예시) 삭제 함수</span>\n<span class=\"token keyword\">const</span> onRemove <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 예시) 함수형 업데이트 후</span>\n<span class=\"token keyword\">const</span> onRemove <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todos</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"성능-최적화를-할-때-고려할-점\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EB%A5%BC-%ED%95%A0-%EB%95%8C-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EC%A0%90\" aria-label=\"성능 최적화를 할 때 고려할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>성능 최적화를 할 때 고려할 점</strong></h1>\n<p>React 최적화 방식을 공부하면서 배웠던 내용중 하나는 아무때나 무분별한 사용은 지양하라는 것</p>\n<p><code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code>, <code class=\"language-text\">React.memo</code>와 같은 것들을 성능을 걱정해서 미리 사용하는 것은 비추천</p>\n<ul>\n<li>가독성에 좋지 않음</li>\n<li><strong>실행되는 모든 코드는 한줄한줄 비용이 소모된다.</strong> 따라서, 꼭 필요한 경우에만 사용</li>\n<li>성능 이슈가 발생 했을 때, 해당 부분의 코드만 최적화를 추천</li>\n</ul>\n<p>→ 실제로 Hello cocone에 <code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code>, <code class=\"language-text\">React.memo를 적용했을 때 렌더링 시간이 크게 줄어들지 않고 비슷하거나 오히려 렌더링 시간이 늘어나기도 했다.</code></p>\n<p>📌 이외에 추가로 적용할 수 있는 최적화 방법</p>\n<ul>\n<li>레이지 로딩</li>\n<li>폰트 최적화</li>\n<li>이미지 최적화</li>\n<li>코드 스플리팅</li>\n</ul>","fields":{"slug":"/posts/2024-01-03---React-렌더링-최적화//posts/React-렌더링-최적화","tagSlugs":["/tag/react/","/tag//","/tag//"]},"frontmatter":{"date":"2024-01-01T22:40:32.169Z","description":"React를 사용하다보면 렌더링 문제에 부딪친다. 렌더링과 리렌더링을 통해 UI를 그릴때 나타날 수 있는 문제점들과 이를 최적화하기 위한 방법을 알아본다.","tags":["React","렌더링","최적화"],"title":"React 렌더링 최적화","socialImage":null}}},"pageContext":{"slug":"/posts/2024-01-03---React-렌더링-최적화//posts/React-렌더링-최적화"}},"staticQueryHashes":["250566491","251939775","401334301"]}